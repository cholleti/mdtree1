{
  "name": "hapi-auth-jwt",
  "description": "JSON Web Token (JWT) authentication plugin",
  "version": "0.1.3",
  "author": {
    "name": "Ryan Fitzgerald",
    "email": "ryan.fitz1@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ryanfitz/hapi-auth-jwt"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "auth",
    "JWT"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "1.x.x",
    "jsonwebtoken": "~0.1.0"
  },
  "peerDependencies": {
    "hapi": ">=6.x.x"
  },
  "devDependencies": {
    "hapi": "6.x.x",
    "lab": "1.x.x",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-bump": "0.0.13"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/ryanfitz/hapi-auth-jwt/raw/master/LICENSE"
    }
  ],
  "readme": "### hapi-auth-jwt\r\n\r\n[**hapi**](https://github.com/spumko/hapi) JSON Web Token (JWT) authentication plugin\r\n\r\n[![Build Status](https://travis-ci.org/ryanfitz/hapi-auth-jwt.png?branch=master)](https://travis-ci.org/ryanfitz/hapi-auth-jwt)\r\n\r\nJSON Web Token authentication requires verifying a signed token. The `'jwt'` scheme takes the following options:\r\n\r\n- `key` - (required) The private key the token was signed with.\r\n- `validateFunc` - (optional) validation and user lookup function with the signature `function(token, callback)` where:\r\n    - `token` - the verified and decoded jwt token\r\n    - `callback` - a callback function with the signature `function(err, isValid, credentials)` where:\r\n        - `err` - an internal error.\r\n        - `isValid` - `true` if the token was valid otherwise `false`.\r\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. Typically, `credentials` are only\r\n          included when `isValid` is `true`, but there are cases when the application needs to know who tried to authenticate even when it fails\r\n          (e.g. with authentication mode `'try'`).\r\n\r\nSee the example folder for an executable example.\r\n\r\n```javascript\r\n\r\nvar accounts = {\r\n    123: {\r\n      id: 123,\r\n      user: 'john',\r\n      name: 'John Doe',\r\n      scope: ['a', 'b']\r\n    }\r\n};\r\n\r\nvar validate = function (decodedToken, callback) {\r\n\r\n    var account = accounts[decodedToken.accountID];\r\n    if (!account) {\r\n        return callback(null, false);\r\n    }\r\n\r\n    callback(err, isValid, {id: account.id, name: account.name });\r\n};\r\n\r\nserver.pack.register(require('hapi-auth-jwt'), function (err) {\r\n    var privateKey = 'BbZJjyoXAdr8BUZuiKKARWimKfrSmQ6fv8kZ7OFfc';\r\n\r\n    server.auth.strategy('token', 'jwt', { key: privatekey,  validateFunc: validate });\r\n    server.route({ method: 'GET', path: '/', config: { auth: 'token' } });\r\n});\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ryanfitz/hapi-auth-jwt/issues"
  },
  "homepage": "https://github.com/ryanfitz/hapi-auth-jwt",
  "_id": "hapi-auth-jwt@0.1.3",
  "_shasum": "38426652a0c50bfe27fed2bf2e7b2e6ff29ae79b",
  "_resolved": "git://github.com/aromka/hapi-auth-jwt#907e710730731cd0105c5f785a2556210fd61ed0",
  "_from": "hapi-auth-jwt@git://github.com/aromka/hapi-auth-jwt"
}
